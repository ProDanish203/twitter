generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @unique @default(uuid()) @db.Uuid
  name     String
  username String? @unique
  email    String  @unique
  password String
  salt     String
  avatar   String?
  phone    String? @unique

  bio       String?
  gender    Gender    @default(MALE)
  birthDate DateTime?

  role          UserRole      @default(USER)
  loginProvider LoginProvider @default(LOCAL)

  isEmailVerified  Boolean @default(false)
  isPhoneVerified  Boolean @default(false)
  isActive         Boolean @default(true)
  hasNotifications Boolean @default(false)

  lastLoginAt  DateTime?
  lastActiveAt DateTime?

  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  otpVerifications   OtpVerification[]
  verificationTokens VerificationToken[]

  @@index([username])
  @@index([email])
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum LoginProvider {
  LOCAL
  GOOGLE
}

model OtpVerification {
  id         String     @id @unique @default(uuid()) @db.Uuid
  userId     String     @db.Uuid
  identifier String // email or phone number
  code       String // Store hashed OTP for security
  type       OtpType
  channel    OtpChannel @default(EMAIL)

  expiresAt   DateTime
  verified    Boolean  @default(false)
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)

  // Additional security fields
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([identifier, type])
  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
}

enum OtpType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  LOGIN_VERIFICATION
  TWO_FACTOR_AUTH
}

enum OtpChannel {
  EMAIL
  SMS
}

model RateLimit {
  id          String   @id @unique @default(uuid()) @db.Uuid
  identifier  String // IP, email, or phone
  action      String // 'send_otp', 'verify_otp', 'reset_password'
  count       Int      @default(1)
  windowStart DateTime @default(now())
  expiresAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, action])
  @@index([identifier, action])
  @@index([expiresAt])
}

model VerificationToken {
  id        String   @id @unique @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  used      Boolean  @default(false)
  type      OtpType
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
