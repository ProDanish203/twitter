generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @unique @default(uuid()) @db.Uuid
  name     String
  username String? @unique
  email    String  @unique
  password String
  salt     String
  avatar   String?
  phone    String? @unique

  bio       String?
  gender    Gender    @default(MALE)
  birthDate DateTime?
  city      String?
  country   String?
  onboarded Boolean   @default(false)

  role          UserRole      @default(USER)
  loginProvider LoginProvider @default(LOCAL)
  providerId    String? // For OAuth providers like Google

  isEmailVerified  Boolean @default(false)
  isPhoneVerified  Boolean @default(false)
  isActive         Boolean @default(true)
  hasNotifications Boolean @default(false)

  lastLoginAt  DateTime?
  lastActiveAt DateTime?

  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Verification Relations
  otpVerifications   OtpVerification[]
  verificationTokens VerificationToken[]

  // Follower Relations
  sentRequests     FollowRequest[] @relation("SentFollowRequests")
  receivedRequests FollowRequest[] @relation("ReceivedFollowRequests")
  following        Follow[]        @relation("UserFollowing")
  followers        Follow[]        @relation("UserFollowers")

  stats UserStats?

  // Notifications
  notifications          Notification[]        @relation("UserNotifications")
  triggeredNotifications Notification[]        @relation("NotificationActor")
  notificationSettings   NotificationSettings?

  // Posts
  posts Post[]  @relation("UserPosts")
  likes Like[]  @relation("UserLikes")
  media Media[]

  @@index([username])
  @@index([email])
  @@index([isActive])
  @@index([lastActiveAt])
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum LoginProvider {
  LOCAL
  GOOGLE
}

model OtpVerification {
  id         String     @id @unique @default(uuid()) @db.Uuid
  userId     String     @db.Uuid
  identifier String // email or phone number
  code       String // Store hashed OTP for security
  type       OtpType
  channel    OtpChannel @default(EMAIL)

  expiresAt   DateTime
  verified    Boolean  @default(false)
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)

  // Additional security fields
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([identifier, type])
  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
}

enum OtpType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  LOGIN_VERIFICATION
  TWO_FACTOR_AUTH
}

enum OtpChannel {
  EMAIL
  SMS
}

model RateLimit {
  id          String   @id @unique @default(uuid()) @db.Uuid
  identifier  String // IP, email, or phone
  action      String // 'send_otp', 'verify_otp', 'reset_password'
  count       Int      @default(1)
  windowStart DateTime @default(now())
  expiresAt   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, action])
  @@index([identifier, action])
  @@index([expiresAt])
}

model VerificationToken {
  id        String   @id @unique @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  used      Boolean  @default(false)
  type      OtpType
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FollowRequest {
  fromUserId String @db.Uuid
  toUserId   String @db.Uuid

  status FollowRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fromUser User @relation("SentFollowRequests", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReceivedFollowRequests", fields: [toUserId], references: [id], onDelete: Cascade)

  @@id([fromUserId, toUserId]) // Composite key
  @@index([toUserId, createdAt]) // For getting pending requests
  @@index([fromUserId]) // For checking sent requests
  @@index([createdAt]) // For cleanup jobs
  @@map("follow_requests")
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Follow {
  followerId String @db.Uuid
  followeeId String @db.Uuid

  createdAt DateTime @default(now())

  // Relations
  follower User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("UserFollowers", fields: [followeeId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@index([followerId, createdAt]) // For getting following list chronologically
  @@index([followeeId, createdAt]) // For getting followers list chronologically
  @@index([followerId]) // For quick follow status checks
  @@index([followeeId]) // For quick follower lookups
  @@map("follows")
}

model UserStats {
  userId         String @id @db.Uuid
  followersCount Int    @default(0)
  followingCount Int    @default(0)
  tweetsCount    Int    @default(0)
  likesCount     Int    @default(0)
  commentsCount  Int    @default(0)
  postsCount     Int    @default(0)

  lastStatsUpdate DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([followersCount])
  @@index([followingCount])
  @@index([tweetsCount])
  @@index([likesCount])
  @@index([commentsCount])
  @@map("user_stats")
}

model Notification {
  id     String @id @unique @default(uuid()) @db.Uuid
  userId String @db.Uuid

  title   String
  message String?
  type    NotificationType
  url     String?

  status   NotificationStatus @default(UNREAD)
  readAt   DateTime? // Timestamp when the notification was read
  priority Int                @default(0) // 0 - low, 1 - medium, 2 - high

  actorId String? @db.Uuid // User who performed the action
  actor   User?   @relation("NotificationActor", fields: [actorId], references: [id], onDelete: SetNull)

  entityType String? // "post", "comment", "user", etc.
  entityId   String? @db.Uuid

  user User @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status, createdAt(sort: Desc)]) // Main query: unread notifications for user
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum NotificationType {
  INFO
  FOLLOW_REQUEST
  FOLLOW
  LIKE
  COMMENT
  REPOST
  POST
  REPLY
  MENTION
  POST_INTERACTION
  DIRECT_MESSAGE
  SYSTEM
}

model NotificationSettings {
  userId String @id @db.Uuid

  // Email Notification Preferences
  emailEnabled          Boolean @default(true)
  emailInfo             Boolean @default(true)
  emailFollowRequests   Boolean @default(true)
  emailFollows          Boolean @default(true)
  emailLikes            Boolean @default(false)
  emailComments         Boolean @default(true)
  emailReposts          Boolean @default(false)
  emailPosts            Boolean @default(false)
  emailReplies          Boolean @default(true)
  emailMentions         Boolean @default(true)
  emailPostInteractions Boolean @default(true)
  emailDirectMessages   Boolean @default(false)
  emailSystem           Boolean @default(true)

  // In-app Notification Preferences
  inAppEnabled          Boolean @default(true)
  inAppInfo             Boolean @default(true)
  inAppFollowRequests   Boolean @default(true)
  inAppFollows          Boolean @default(true)
  inAppLikes            Boolean @default(true)
  inAppComments         Boolean @default(true)
  inAppReposts          Boolean @default(true)
  inAppPosts            Boolean @default(true)
  inAppReplies          Boolean @default(true)
  inAppMentions         Boolean @default(true)
  inAppPostInteractions Boolean @default(true)
  inAppDirectMessages   Boolean @default(true)
  inAppSystem           Boolean @default(true)

  // Push Notification Preferences
  pushEnabled          Boolean @default(false)
  pushInfo             Boolean @default(false)
  pushFollowRequests   Boolean @default(false)
  pushFollows          Boolean @default(false)
  pushLikes            Boolean @default(false)
  pushComments         Boolean @default(false)
  pushReposts          Boolean @default(false)
  pushPosts            Boolean @default(false)
  pushReplies          Boolean @default(false)
  pushMentions         Boolean @default(false)
  pushPostInteractions Boolean @default(false)
  pushDirectMessages   Boolean @default(false)
  pushSystem           Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Post {
  id     String @id @unique @default(uuid()) @db.Uuid
  userId String @db.Uuid

  content String?
  media   Media[]

  mentions   String[]
  tags       String[]
  visibility PostVisibility @default(PUBLIC)
  postType   PostType       @default(ORIGINAL)

  parentId String? @db.Uuid // For comments/replies
  repostId String? @db.Uuid // For reposts

  wasCommentFor String? @db.Uuid // Stores original parentId if parent was deleted
  wasRepostFor  String? @db.Uuid // Stores original repostId if original was deleted

  // Relations
  author User @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)

  parent   Post?  @relation("PostComments", fields: [parentId], references: [id])
  comments Post[] @relation("PostComments")

  originalPost Post?  @relation("PostReposts", fields: [repostId], references: [id])
  reposts      Post[] @relation("PostReposts")

  likes     Like[]
  postStats PostStats?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  @@index([userId, createdAt(sort: Desc)]) // User timeline
  @@index([parentId, createdAt(sort: Asc)]) // Comments
  @@index([repostId, createdAt(sort: Desc)]) // Reposts
  @@index([createdAt(sort: Desc), deletedAt]) // Global timeline
  @@index([visibility, createdAt(sort: Desc)]) // Public posts
  @@index([tags, createdAt(sort: Desc)]) // Hashtag search
  @@index([postType, createdAt(sort: Desc)]) // Filter by post type
  @@index([deletedAt]) // Soft delete queries
  @@map("posts")
}

model PostStats {
  postId        String @id @db.Uuid
  likesCount    Int    @default(0)
  commentsCount Int    @default(0)
  repostsCount  Int    @default(0)
  viewsCount    Int    @default(0)

  lastStatsUpdate DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([likesCount(sort: Desc)]) // Popular by likes
  @@index([commentsCount(sort: Desc)]) // Most discussed
  @@index([repostsCount(sort: Desc)]) // Most shared
  @@index([viewsCount(sort: Desc)]) // Most viewed
  @@map("post_stats")
}

model Like {
  id     String @id @unique @default(uuid()) @db.Uuid
  userId String @db.Uuid
  postId String @db.Uuid

  user User @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicate likes
  @@index([postId, createdAt(sort: Desc)]) // Recent likes on post
  @@index([userId, createdAt(sort: Desc)]) // User's recent likes
  @@map("likes")
}

model Media {
  id     String    @id @unique @default(uuid()) @db.Uuid
  userId String    @db.Uuid
  postId String    @db.Uuid
  url    String
  type   MediaType

  // Metadata
  filename     String? @db.VarChar(255)
  size         Int?
  width        Int?
  height       Int?
  duration     Int?
  thumbnailUrl String? @db.VarChar(500)
  altText      String? @db.VarChar(500)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
  @@index([type])
  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  GIF
  DOCUMENT
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum PostType {
  ORIGINAL
  REPOST
  QUOTE
  COMMENT
}
